import time
import random
from memory_manager import MemoryManager
from strategies import FirstFitStrategy, BestFitStrategy, WorstFitStrategy


def run_benchmark(name, strategy_class, iterations=100_000, memory_size=100_000):
    manager = MemoryManager(memory_size, strategy_class())
    allocations = []

    start = time.time()
    for i in range(iterations):
        size = random.randint(1, 500)  # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç 1 –¥–æ 500 KB
        pid, addr = manager.allocate_memory(size)
        if addr != -1:
            allocations.append(pid)

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –∫–∞–∂–¥—ã–µ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π
        if i % 1000 == 0 and i > 0 and allocations:
            manager.free_memory(allocations.pop(0))
    end = time.time()

    fragmentation = manager.count_fragmentation()
    success_allocations = len(allocations)
    duration = end - start

    return {
        "strategy": name,
        "duration": duration,
        "success_allocations": success_allocations,
        "fragmentation": fragmentation
    }


def print_benchmark_results(results):
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:")
    print("---------------------------------------------------------------")
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<12} | {'–í—Ä–µ–º—è (—Å)':<10} | {'–í—ã–¥–µ–ª–µ–Ω–∏–π':<10} | {'–§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è (%)':<16}")
    print("---------------------------------------------------------------")
    for res in results:
        print(f"{res['strategy']:<12} | {res['duration']:.4f}     | {res['success_allocations']:<10} | {res['fragmentation']:<16}")
    print("---------------------------------------------------------------")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞...\n")

    benchmark_results = []

    print("Running: FirstFitStrategy...")
    result = run_benchmark("FirstFit", FirstFitStrategy)
    benchmark_results.append(result)

    print("Running: BestFitStrategy...")
    result = run_benchmark("BestFit", BestFitStrategy)
    benchmark_results.append(result)

    print("Running: WorstFitStrategy...")
    result = run_benchmark("WorstFit", WorstFitStrategy)
    benchmark_results.append(result)

    print_benchmark_results(benchmark_results)
    print("\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")